# The location of the MCUd directory.
MCUD ?= mcud

# The directory containing the application sources.
APP_SRC ?= source

# The directory which will containg compiled binaries.
BIN_DIR ?= bin

# The source directory of MCUd.
MCUD_SRC = $(MCUD)/source/mcud

# The directory containing the sources for the D runtime.
DIR_DRUNTIME = $(MCUD)/libd

# The directory containing the sources for libphobos.
DIR_LIBPHOBOS = $(MCUD)/libphobos

# The directory containing CPU sources.
CPUS = $(MCUD_SRC)/cpu

# The output ELF file.
ELF_APP = $(BIN_DIR)/application.elf

# The output ELF file for unit testing.
ELF_TEST_FILE = $(BIN_DIR)/test.elf

# The output BIN file.
BIN_APP = $(ELF_FILE:%.elf=%.bin)

# The output object file.
OBJ_APP = $(BIN_DIR)/application.o

# The object file for the D runtime
OBJ_DRUNTIME = $(BIN_DIR)/druntime.o

# The object file for the Phobos standard library
OBJ_PHOBOS = $(BIN_DIR)/phobos.o

# The linker script to use.
LINKER_SCRIPT = $(CPUS)/$(CPU)/linker.ld

ifeq ($(CPU),)
$(error No CPU was set)
endif

# Include the all target first.
.PHONY: all
all: $(ELF_APP)
	arm-none-eabi-size $(ELF_APP)

# Include CPU targets
include $(CPUS)/$(CPU)/Makefile.include

# Find all the sources to build.
# Common sources
COMMONSOURCES += $(shell find $(APP_SRC) -type f -iname "*.d")

# Test-only sources
TESTSOURCES += $(shell find $(MCUD_SRC) -type f -iname "*.d")
TESTSOURCES := $(COMMONSOURCES) $(TESTSOURCES)

# Build-only sources
SOURCES += $(shell find $(MCUD_SRC) -type f -iname "*.d")
SOURCES := $(COMMONSOURCES) $(SOURCES)
SOURCES_DRUNTIME += $(shell find $(DIR_DRUNTIME) -type f -iname "*.d")
SOURCES_LIBPHOBOS += $(shell find $(DIR_LIBPHOBOS) -type f -iname "*.d")

# The host D compiler to use.
HOSTDC = gdc
# The D compiler to use.
DC = $(TARGET)gdc
# The linker to use.
LD = $(TARGET)ld
# Flags to pass to the D compiler.
DFLAGS += -nostdlib -Os -ggdb -ffunction-sections -fdata-sections -fno-moduleinfo
# Flags to pass to the compiler when building tests.
HOSTDFLAGS = -funittest -fmain -ggdb
# The tool to strip binaries with.
STRIP = $(TARGET)strip
# The tool to copy object files with.
OBJCOPY = $(TARGET)objcopy

.PHONY: test
test: $(ELF_TEST_FILE)
	@echo "Running tests..."
	@$(ELF_TEST_FILE)
	@echo "Tests succeeded!"

.PHONY: info
info:
	@echo "Sources: $(SOURCES)"
	@echo "App sources: $(APP_SRC)"
	@echo "D4MCU sources: $(MCUD_SRC)"
	@echo "Binaries: $(BIN_DIR)"

.PHONY: clean
clean:
	rm -rf $(BIN_DIR)

$(BIN_APP): $(ELF_APP)
	$(OBJCOPY) -O binary $< $@

$(ELF_APP): $(OBJ_APP) $(OBJ_DRUNTIME) $(OBJ_PHOBOS) $(LINKER_SCRIPT)
	@mkdir -p $(dir $@)
	$(LD) -T $(LINKER_SCRIPT) --gc-sections -o $@ $< $(OBJ_PHOBOS) $(OBJ_DRUNTIME)

$(OBJ_APP): $(SOURCES) $(MCUD)/Makefile.include
	@mkdir -p $(dir $@)
	$(DC) $(DFLAGS) -I $(DIR_DRUNTIME) -I $(DIR_LIBPHOBOS) -c -o $@ $(SOURCES)

$(OBJ_PHOBOS): $(SOURCES_LIBPHOBOS) $(MCUD)/Makefile.include
	@mkdir -p $(dir $@)
	$(DC) $(DFLAGS) -I $(DIR_DRUNTIME) -c -o $@ $(SOURCES_LIBPHOBOS)

$(OBJ_DRUNTIME): $(SOURCES_DRUNTIME) $(MCUD)/Makefile.include
	@mkdir -p $(dir $@)
	$(DC) $(DFLAGS) -c -o $@ $(SOURCES_DRUNTIME)

$(ELF_TEST_FILE): $(TESTSOURCES) $(MCUD)/Makefile.include
	mkdir -p $(dir $@)
	$(HOSTDC) $(HOSTDFLAGS) -o $@ $(TESTSOURCES)

