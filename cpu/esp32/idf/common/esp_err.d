// Copyright 2015-2016 Espressif Systems (Shanghai) PTE LTD
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
module idf.common.esp_err;

extern(C):

alias esp_err_t = int;

/* Definitions for error constants. */
/// esp_err_t value indicating success (no error)
enum ESP_OK = 0;
/// Generic esp_err_t code indicating failure
enum ESP_FAIL = -1;

/// Out of memory
enum ESP_ERR_NO_MEM = 0x101;
/// Invalid argument
enum ESP_ERR_INVALID_ARG = 0x102;
/// Invalid state
enum ESP_ERR_INVALID_STATE = 0x103;
/// Invalid size
enum ESP_ERR_INVALID_SIZE = 0x104;
/// Requested resource not found
enum ESP_ERR_NOT_FOUND = 0x105;
/// Operation or feature not supported
enum ESP_ERR_NOT_SUPPORTED = 0x106;
/// Operation timed out
enum ESP_ERR_TIMEOUT = 0x107;
/// Received response was invalid
enum ESP_ERR_INVALID_RESPONSE = 0x108;
/// CRC or checksum was invalid
enum ESP_ERR_INVALID_CRC = 0x109;
/// Version was invalid
enum ESP_ERR_INVALID_VERSION = 0x10A;
/// MAC address was invalid
enum ESP_ERR_INVALID_MAC = 0x10B;

/// Starting number of WiFi error codes
enum ESP_ERR_WIFI_BASE = 0x3000;
/// Starting number of MESH error codes
enum ESP_ERR_MESH_BASE = 0x4000;
/// Starting number of flash error codes
enum ESP_ERR_FLASH_BASE = 0x6000;
/// Starting number of HW cryptography module error codes
enum ESP_ERR_HW_CRYPTO_BASE = 0xc000;

/**
Returns string for esp_err_t error codes

This function finds the error code in a pre-generated lookup-table and
returns its string representation.

The function is generated by the Python script
tools/gen_esp_err_to_name.py which should be run each time an esp_err_t
error is modified, created or removed from the IDF project.

Params:
	code = Error code
Returns: Error message
*/
const(char)* esp_err_to_name(esp_err_t code);

/**
Returns string for `esp_err_t` and system error codes

This function finds the error code in a pre-generated lookup-table of
`esp_err_t` errors and returns its string representation. If the error code
is not found then it is attempted to be found among system errors.

The function is generated by the Python script
tools/gen_esp_err_to_name.py which should be run each time an `esp_err_t`
error is modified, created or removed from the IDF project.

Params:
	code = Error code
	buf = Buffer where the error message should be written.
	buflen = Size of buffer `buf`. At most buflen bytes are written into the buf
			buffer (including the terminating null bytes).
Returns: Buf containing the string error message.
*/
const(char)* esp_err_to_name_r(esp_err_t code, char* buf, size_t buflen);
